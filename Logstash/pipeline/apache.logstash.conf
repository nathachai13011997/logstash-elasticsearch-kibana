input {
    http {
        port => 8081
        type => "access"
    }

    file {
        path => ["${PWD}/input/apache.log"]
        type => "access"
    }
}

filter {

    if [url][path] == "/error" {
        mutate {
            replace => {
                "type" => "error"
            }
        }
        
    } else {
        grok {
            match => {
                # "message" => '%{IP:ip_address} %{USER:identity} %{USER:user_id} \[%{HTTPDATE:timestamp}\] "%{WORD:http_method} %{URIPATHPARAM:req_path} HTTP/%{BASE10NUM:http_version:float}" %{INT:http_status:int} %{INT:bytes:int}'
                "message" => "%{HTTPD_COMBINEDLOG}"
            }
        }

        if "_grokparsefailure" in [tags] {
            # เหมือน return ( ในกรณีนี้ ให้หยุดการทำงานทันที )
            drop {}
        }

        useragent {
            source => "[user_agent][original]"
            target => "ua"
        }

        mutate {
            remove_field => ["host", "@version", "event", "log", "message"]
        }

        date {
            # ค่า timestamp map กับ ค่า @timestamp
            match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
            # remove field timestamp
            remove_field => ["timestamp"]
        }
    }
}

output {
    stdout {
        
    }

    if [type] == "access" {
        # gen ไฟล์
        file {
            path => "${PWD}/output/access-%{+yyyyMMdd}.log"
        }

        elasticsearch {
            hosts => ["http://192.168.1.34:9200"]
            index => "bank-access-%{+yyyyMMdd}"
        }
    } else if [type] == "error" {
        # gen ไฟล์
        file {
            path => "${PWD}/output/error-%{+yyyyMMdd}.log"
        }

        elasticsearch {
            hosts => ["http://192.168.1.34:9200"]
            index => "bank-error-%{+yyyyMMdd}"
        }
    }
    # path => "${PWD}/output/apache-%{+yyyyMMdd}.log"

   
}